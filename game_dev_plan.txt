[게임 개발 설계 문서] Project: Pixel Deck

================================
1. 게임 개요 (Game Overview)
================================

- 장르: 2D 픽셀 아트, 턴제 로그라이크 덱빌딩
- 핵심 플레이: 플레이어는 절차적으로 생성된 맵을 탐험하며, 턴제 전투에서 카드를 사용해 적을 물리친다. 전투 보상으로 새로운 카드를 얻어 자신의 덱을 강력하게 만들고, 최종 보스를 물리치는 것이 목표.
- 타겟 플랫폼: 안드로이드, 스팀(PC)
- 개발 엔진: Godot Engine

================================
2. 핵심 시스템 상세 설계
================================

----------------------------------------
Phase 1: 핵심 전투 시스템 (Core Combat System)
----------------------------------------
* 목표: 게임의 가장 기본적인 '전투' 한 판을 완성한다.
* 주요 씬: Battle.tscn

  - 플레이어 캐릭터:
    - 화면 좌측에 위치. 체력(HP), 에너지(Cost), 방어도(Block) 수치를 가짐.
    - Godot 구현: `Player.tscn` (Sprite, HealthBar, 각종 Label)

  - 적 캐릭터:
    - 화면 우측에 위치. HP, 다음 행동 예고(Intent) 아이콘을 가짐.
    - Godot 구현: `Enemy.tscn` (Sprite, HealthBar, Intent Icon)

  - 카드 시스템:
    - 카드는 이름, 코스트, 타입(공격/스킬/파워), 효과 설명, 아트를 가짐.
    - 상호작용: 마우스 올리면 확대, 드래그 앤 드롭으로 사용, 에너지가 부족하면 비활성화.
    - Godot 구현: `Card.tscn` (템플릿 씬), `CardUI.gd` 스크립트

  - 턴 관리자:
    - 플레이어 턴과 적 턴을 관리하는 보이지 않는 총괄 시스템.
    - 플레이어 턴: ①에너지/방어도 초기화 → ②덱에서 5장 드로우 → ③카드 사용 대기
    - 적 턴: ①예고했던 행동 실행 → ②다음 행동 예고
    - Godot 구현: `BattleManager.gd` (싱글톤 또는 메인 노드 스크립트)

  - 덱과 카드 묶음:
    - 드로우 파일(Draw Pile): 뽑을 카드 더미.
    - 핸드(Hand): 현재 손에 들고 있는 카드.
    - 버린 파일(Discard Pile): 사용했거나 턴 종료 시 버려진 카드 더미.
    - 소멸 파일(Exhaust Pile): 게임에서 완전히 제외된 카드 더미.
    - Godot 구현: `Deck.gd` 스크립트에서 Array 자료구조로 관리

----------------------------------------
Phase 2: 로그라이크 루프 (Roguelike Loop)
----------------------------------------
* 목표: 한 번의 전투가 아니라, 계속해서 다음 단계로 나아가는 '모험'의 흐름을 만든다.
* 주요 씬: Map.tscn, RewardScreen.tscn

  - 절차적 생성 맵:
    - 여러 갈래의 길로 구성된 맵. 각 지점은 아이콘으로 표시됨.
    - 노드 종류: 일반 전투, 엘리트 전투, 보스, 상점, 휴식, 미지의 이벤트.
    - Godot 구현: `MapGenerator.gd`에서 노드 위치와 연결을 랜덤 생성. 각 노드는 Button으로 구현.

  - 전투 보상:
    - 전투 승리 후 나타나는 화면.
    - 보상 종류: ①골드 획득 ②물약 획득 ③3장의 카드 중 1장 선택하여 덱에 추가.
    - Godot 구현: `RewardScreen.tscn`, `CardReward.gd`

  - 게임 진행 데이터:
    - 플레이어의 현재 체력, 골드, 덱, 유물 정보 등은 게임을 끄기 전까지 유지.
    - Godot 구현: `GameData.gd` (싱글톤) 스크립트에 모든 정보 저장.

----------------------------------------
Phase 3: 콘텐츠 확장 (Content Expansion)
----------------------------------------
* 목표: 게임에 깊이와 다양성을 더해 반복 플레이의 재미를 높인다.
* 데이터 관리: 카드, 유물, 적 데이터는 JSON 파일이나 Godot의 Resource로 관리.

  - 유물 (Relics): 획득 시 영구적인 패시브 효과를 주는 아이템. (예: "매 턴 첫 번째로 내는 공격 카드의 비용이 0이 된다.")
  - 물약 (Potions): 전투 중 한 번 사용할 수 있는 강력한 소모품. (예: "즉시 카드 2장을 뽑는다.")
  - 다양한 카드: 새로운 효과와 컨셉을 가진 카드를 대량 추가. (상태이상, 파워 카드 등)
  - 다양한 적: 고유한 패턴과 능력을 가진 새로운 적 추가.
  - 이벤트: 전투가 아닌, 선택지를 통해 보상이나 페널티를 받는 텍스트 기반 이벤트.

----------------------------------------
Phase 4: 다듬기 (Polishing)
----------------------------------------
* 목표: 게임의 완성도를 높여 플레이어에게 쾌적하고 즐거운 경험을 제공한다.

  - 메인 메뉴: 게임 시작, 이어하기, 설정, 종료 기능. (`MainMenu.tscn`)
  - 아트 & 애니메이션: 모든 임시 이미지를 최종 픽셀 아트로 교체. 애니메이션 추가.
  - 사운드 (SFX/BGM): 배경음악, 효과음 추가.
  - 시각 효과 (VFX): 파티클, 스크린 흔들림 등 타격감 연출 추가.
  - UI/UX 개선: 폰트 가독성, 설정 기능, 튜토리얼 등 편의 기능 추가.
  - 최적화: 성능 개선 및 메모리 사용량 최적화 작업.
